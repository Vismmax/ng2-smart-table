import { HttpParams } from '@angular/common/http';
import { lastValueFrom } from 'rxjs';
import { LocalDataSource } from '../local/local.data-source';
import { ServerSourceConf } from './server-source.conf';
import { getDeepFromObject } from '../../helpers';
import { map } from 'rxjs/operators';
export class ServerDataSource extends LocalDataSource {
    constructor(http, conf = {}) {
        super();
        this.http = http;
        this.lastRequestCount = 0;
        this.conf = new ServerSourceConf(conf);
        if (!this.conf.endPoint) {
            throw new Error('At least endPoint must be specified as a configuration of the server data source.');
        }
    }
    count() {
        return this.lastRequestCount;
    }
    getAll() {
        return this.loadData(false, false, false);
    }
    getElements() {
        return this.loadData(true, true, true);
    }
    getFilteredAndSorted() {
        return this.loadData(true, true, false);
    }
    loadData(filtered, sorted, paginated) {
        return lastValueFrom(this.requestElements(filtered, sorted, paginated)
            .pipe(map(res => {
            this.lastRequestCount = this.extractTotalFromResponse(res);
            // TODO: the following two lines are obviously incorrect
            //       but whoever hacked this ServerDataSource into the project did not think about compatibility to the interface
            this.data = this.extractDataFromResponse(res);
            this.filteredAndSorted = this.data;
            return this.data;
        })));
    }
    /**
     * Extracts array of data from server response
     * @param res
     * @returns {any}
     */
    extractDataFromResponse(res) {
        const rawData = res.body;
        const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;
        if (data instanceof Array) {
            return data;
        }
        throw new Error(`Data must be an array.
    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);
    }
    /**
     * Extracts total rows count from the server response
     * Looks for the count in the heders first, then in the response body
     * @param res
     * @returns {any}
     */
    extractTotalFromResponse(res) {
        if (res.headers.has(this.conf.totalKey)) {
            return +res.headers.get(this.conf.totalKey);
        }
        else {
            const rawData = res.body;
            return getDeepFromObject(rawData, this.conf.totalKey, 0);
        }
    }
    requestElements(filtered, sorted, paginated) {
        let httpParams = new HttpParams();
        if (filtered)
            httpParams = this.addFilterRequestParams(httpParams);
        if (sorted)
            httpParams = this.addSortRequestParams(httpParams);
        if (paginated)
            httpParams = this.addPagerRequestParams(httpParams);
        return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });
    }
    addSortRequestParams(httpParams) {
        if (this.sortConf) {
            let fields = [];
            let directions = [];
            this.sortConf.forEach((fieldConf) => {
                if (fieldConf.direction !== null) {
                    fields.push(fieldConf.field);
                    directions.push(fieldConf.direction.toUpperCase());
                }
            });
            httpParams = httpParams.set(this.conf.sortFieldKey, fields.join(','));
            httpParams = httpParams.set(this.conf.sortDirKey, directions.join(','));
        }
        return httpParams;
    }
    addFilterRequestParams(httpParams) {
        if (this.filterConf.filters) {
            this.filterConf.filters.forEach((fieldConf) => {
                if (fieldConf['search']) {
                    httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);
                }
            });
        }
        return httpParams;
    }
    addPagerRequestParams(httpParams) {
        httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf.page);
        httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf.perPage);
        return httpParams;
    }
}
//# sourceMappingURL=data:application/json;base64,