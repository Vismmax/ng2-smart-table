export function prepareValue(value) { return value; }
export class Cell {
    constructor(value, row, column, dataSet) {
        this.value = value;
        this.row = row;
        this.column = column;
        this.dataSet = dataSet;
        this.newValue = '';
        this.newValue = value;
    }
    getColumn() {
        return this.column;
    }
    getRow() {
        return this.row;
    }
    /**
     * Gets the value (after post-processing with valuePrepareFunction).
     */
    getValue() {
        const valid = this.column.getValuePrepareFunction() instanceof Function;
        const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;
        return prepare.call(null, this.value, this.row.getData(), this);
    }
    /**
     * Returns the raw value that has not been post-processed by the valuePrepareFunction.
     */
    getRawValue() {
        return this.value;
    }
    setValue(value) {
        this.newValue = value;
    }
    getId() {
        return this.getColumn().id;
    }
    getTitle() {
        return this.getColumn().title;
    }
    isEditable() {
        if (this.getRow().index === -1) {
            return this.getColumn().isAddable ?? false;
        }
        else {
            return this.getColumn().isEditable ?? false;
        }
    }
    resetValue() {
        this.newValue = this.getRawValue();
    }
}
Cell.PREPARE = prepareValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXIyLXNtYXJ0LXRhYmxlL3NyYy9saWIvbGliL2RhdGEtc2V0L2NlbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxVQUFVLFlBQVksQ0FBRSxLQUFVLElBQUksT0FBTyxLQUFLLENBQUEsQ0FBQyxDQUFDO0FBRTFELE1BQU0sT0FBTyxJQUFJO0lBS2YsWUFBc0IsS0FBVSxFQUFZLEdBQVEsRUFBWSxNQUFXLEVBQVksT0FBZ0I7UUFBakYsVUFBSyxHQUFMLEtBQUssQ0FBSztRQUFZLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFBWSxXQUFNLEdBQU4sTUFBTSxDQUFLO1FBQVksWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUh2RyxhQUFRLEdBQVEsRUFBRSxDQUFDO1FBSWpCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDTixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLFlBQVksUUFBUSxDQUFDO1FBQ3hFLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdFLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFVO1FBQ2pCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUM7U0FDNUM7YUFDSTtZQUNILE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JDLENBQUM7O0FBckRnQixZQUFPLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb2x1bW59IGZyb20gJy4vY29sdW1uJztcbmltcG9ydCB7RGF0YVNldH0gZnJvbSAnLi9kYXRhLXNldCc7XG5pbXBvcnQge1Jvd30gZnJvbSAnLi9yb3cnO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVZhbHVlICh2YWx1ZTogYW55KSB7IHJldHVybiB2YWx1ZSB9XG5cbmV4cG9ydCBjbGFzcyBDZWxsIHtcblxuICBuZXdWYWx1ZTogYW55ID0gJyc7XG4gIHByb3RlY3RlZCBzdGF0aWMgUFJFUEFSRSA9IHByZXBhcmVWYWx1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmFsdWU6IGFueSwgcHJvdGVjdGVkIHJvdzogUm93LCBwcm90ZWN0ZWQgY29sdW1uOiBhbnksIHByb3RlY3RlZCBkYXRhU2V0OiBEYXRhU2V0KSB7XG4gICAgdGhpcy5uZXdWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0Q29sdW1uKCk6IENvbHVtbiB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uO1xuICB9XG5cbiAgZ2V0Um93KCk6IFJvdyB7XG4gICAgcmV0dXJuIHRoaXMucm93O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIChhZnRlciBwb3N0LXByb2Nlc3Npbmcgd2l0aCB2YWx1ZVByZXBhcmVGdW5jdGlvbikuXG4gICAqL1xuICBnZXRWYWx1ZSgpOiBhbnkge1xuICAgIGNvbnN0IHZhbGlkID0gdGhpcy5jb2x1bW4uZ2V0VmFsdWVQcmVwYXJlRnVuY3Rpb24oKSBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xuICAgIGNvbnN0IHByZXBhcmUgPSB2YWxpZCA/IHRoaXMuY29sdW1uLmdldFZhbHVlUHJlcGFyZUZ1bmN0aW9uKCkgOiBDZWxsLlBSRVBBUkU7XG4gICAgcmV0dXJuIHByZXBhcmUuY2FsbChudWxsLCB0aGlzLnZhbHVlLCB0aGlzLnJvdy5nZXREYXRhKCksIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJhdyB2YWx1ZSB0aGF0IGhhcyBub3QgYmVlbiBwb3N0LXByb2Nlc3NlZCBieSB0aGUgdmFsdWVQcmVwYXJlRnVuY3Rpb24uXG4gICAqL1xuICBnZXRSYXdWYWx1ZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgc2V0VmFsdWUodmFsdWU6IGFueSk6IGFueSB7XG4gICAgdGhpcy5uZXdWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0SWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb2x1bW4oKS5pZDtcbiAgfVxuXG4gIGdldFRpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q29sdW1uKCkudGl0bGU7XG4gIH1cblxuICBpc0VkaXRhYmxlKCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmdldFJvdygpLmluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sdW1uKCkuaXNBZGRhYmxlID8/IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbHVtbigpLmlzRWRpdGFibGUgPz8gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmVzZXRWYWx1ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm5ld1ZhbHVlID0gdGhpcy5nZXRSYXdWYWx1ZSgpO1xuICB9XG59XG4iXX0=