import { Row } from './row';
import { Column } from './column';
export class DataSet {
    constructor(data = [], columnSettings) {
        this.columnSettings = columnSettings;
        this.data = [];
        this.columns = [];
        this.rows = [];
        this.willSelect = '';
        this.createColumns(columnSettings);
        this.setData(data);
        this.createNewRow();
    }
    setData(data, selectedRows = []) {
        this.data = data.map((el, index) => {
            const row = new Row(index, el, this);
            row.isSelected = selectedRows.indexOf(el) > -1;
            return row;
        });
        this.createRows();
    }
    getColumns() {
        return this.columns;
    }
    getExpandedRow() {
        if (!this.expandedRow) {
            console.warn('Expanded row not found');
            throw new Error('Expanded row not found');
        }
        return this.expandedRow;
    }
    getSelectedRow() {
        if (!this.selectedRow) {
            console.warn('Selected row not found');
            throw new Error('Selected row not found');
        }
        return this.selectedRow;
    }
    getRows() {
        return this.rows ?? [];
    }
    getFirstRow() {
        return this.rows[0];
    }
    getLastRow() {
        return this.rows[this.rows.length - 1];
    }
    findRowByData(data) {
        const row = this.rows.find((row) => row.getData() === data);
        if (!row) {
            console.warn('Data row not found', data);
            throw new Error('Row not found');
        }
        return row;
    }
    deselectAll() {
        this.rows.forEach((row) => {
            row.isSelected = false;
        });
        // we need to clear selectedRow field because no one row selected
        this.selectedRow = undefined;
    }
    clearExpandAll() {
        this.rows.forEach((row) => {
            row.isExpanded = false;
        });
        // we need to clear selectedRow field because no one row selected
        this.expandedRow = undefined;
    }
    selectRow(row) {
        const previousIsSelected = row.isSelected;
        this.deselectAll();
        row.isSelected = !previousIsSelected;
        this.selectedRow = row;
    }
    multipleSelectRow(row) {
        row.isSelected = !row.isSelected;
        this.selectedRow = row;
    }
    expandRow(row) {
        const previousIsExpanded = row.isExpanded;
        this.clearExpandAll();
        if (row.index !== this.expandedRow?.index) {
            this.expandedRow = undefined;
        }
        row.isExpanded = !previousIsExpanded;
        this.expandedRow = row;
        return this.expandedRow;
    }
    selectPreviousRow() {
        if (this.rows.length > 0) {
            let index = this.selectedRow ? this.selectedRow.index : 0;
            if (index > this.rows.length - 1) {
                index = this.rows.length - 1;
            }
            this.selectRow(this.rows[index]);
            return this.getSelectedRow();
        }
        throw new Error('There are no rows inside the data table');
    }
    selectFirstRow() {
        if (this.rows.length > 0) {
            this.selectRow(this.rows[0]);
            return this.getSelectedRow();
        }
        throw new Error('There are no rows inside the data table');
    }
    selectLastRow() {
        if (this.rows.length > 0) {
            this.selectRow(this.rows[this.rows.length - 1]);
            return this.getSelectedRow();
        }
        throw new Error('There are no rows inside the data table');
    }
    selectRowByIndex(index) {
        const rowsLength = this.rows.length;
        if (rowsLength === 0) {
            throw new Error('There are no rows inside the data table');
        }
        if (!index) {
            this.selectFirstRow();
        }
        else if (index > 0 && index < rowsLength) {
            this.selectRow(this.rows[index]);
        }
        else
            // we need to deselect all rows if we got an incorrect index
            this.deselectAll();
    }
    willSelectFirstRow() {
        this.willSelect = 'first';
    }
    willSelectLastRow() {
        this.willSelect = 'last';
    }
    select(selectedRowIndex) {
        if (this.getRows().length === 0) {
            throw new Error('There are no rows inside the data table');
        }
        if (this.willSelect) {
            if (this.willSelect === 'first') {
                this.selectFirstRow();
            }
            if (this.willSelect === 'last') {
                this.selectLastRow();
            }
            this.willSelect = '';
        }
        else {
            this.selectRowByIndex(selectedRowIndex);
        }
        return this.getSelectedRow();
    }
    createNewRow() {
        this.newRow = new Row(-1, {}, this);
        this.newRow.isInEditing = true;
    }
    /**
     * Create columns by mapping from the settings
     * @param settings
     * @private
     */
    createColumns(settings) {
        for (const id in settings) {
            if (settings.hasOwnProperty(id)) {
                this.columns.push(new Column(id, settings[id], this));
            }
        }
    }
    /**
     * Create rows based on current data prepared in data source
     * @private
     */
    createRows() {
        this.rows = [];
        this.data.forEach((el) => {
            this.rows.push(el);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,