import { AfterViewInit, EventEmitter, OnDestroy, QueryList, ViewContainerRef } from '@angular/core';
import { Grid } from '../../lib/grid';
import { DataSource } from '../../lib/data-source/data-source';
import { Cell } from '../../lib/data-set/cell';
import { Row } from '../../lib/data-set/row';
import { CustomActionEvent, DeleteConfirmEvent, DeleteEvent, EditCancelEvent, EditConfirmEvent, EditEvent } from '../../lib/events';
import * as i0 from "@angular/core";
export declare class NgxSmartTableTbodyComponent implements AfterViewInit, OnDestroy {
    grid: Grid;
    source: DataSource;
    deleteConfirm: EventEmitter<DeleteConfirmEvent>;
    editConfirm: EventEmitter<EditConfirmEvent>;
    editCancel: EventEmitter<EditCancelEvent>;
    rowClassFunction: Function;
    edit: EventEmitter<EditEvent>;
    delete: EventEmitter<DeleteEvent>;
    custom: EventEmitter<CustomActionEvent>;
    userSelectRow: EventEmitter<Row>;
    editRowSelect: EventEmitter<Row>;
    multipleSelectRow: EventEmitter<Row>;
    rowHover: EventEmitter<Row>;
    onExpandRow: EventEmitter<Row>;
    expandedRowChild: QueryList<ViewContainerRef>;
    expandedRowComponent: any;
    hasChildComponent: boolean;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private getExpandedRowComponentFromSettings;
    protected createCustomComponent(): void;
    isMultiSelectVisible: boolean;
    showActionColumnLeft: boolean;
    showActionColumnRight: boolean;
    mode: string;
    editInputClass: string;
    isActionAdd: boolean;
    isActionEdit: boolean;
    isActionDelete: boolean;
    noDataMessage: boolean;
    get tableColumnsCount(): number;
    ngOnChanges(): void;
    getVisibleCells(cells: Array<Cell>): Array<Cell>;
    onExpandRowClick(row: Row): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxSmartTableTbodyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxSmartTableTbodyComponent, "[angular2-st-tbody]", never, { "grid": "grid"; "source": "source"; "deleteConfirm": "deleteConfirm"; "editConfirm": "editConfirm"; "editCancel": "editCancel"; "rowClassFunction": "rowClassFunction"; }, { "edit": "edit"; "delete": "delete"; "custom": "custom"; "userSelectRow": "userSelectRow"; "editRowSelect": "editRowSelect"; "multipleSelectRow": "multipleSelectRow"; "rowHover": "rowHover"; "onExpandRow": "onExpandRow"; }, never, never>;
}
